package gen

import (
	"fmt"
	. "github.com/ellisez/inject-golang/global"
	"github.com/ellisez/inject-golang/model"
	"github.com/ellisez/inject-golang/utils"
	"go/ast"
	"os"
	"path/filepath"
	"strings"
)

// gen_ctx.go
func genSingletonFile(ctx *model.Ctx, dir string) error {
	fileDir := filepath.Join(dir, GenInternalPackage)
	filename := filepath.Join(fileDir, GenSingletonFilename)

	if ctx.SingletonInstances == nil {
		err := os.Remove(filename)
		if err != nil {
			if os.IsNotExist(err) {
				return nil
			}
			return err
		}
		return nil
	}

	astFile := &ast.File{
		Name:  ast.NewIdent(GenInternalPackage),
		Scope: ast.NewScope(nil),
	}

	genSingletonImportsAst(ctx, astFile, filename)

	genSingletonStructAst(ctx, astFile)

	genSingletonGetterAndSetterAst(ctx, astFile)

	genCtxNewAst(ctx, astFile)

	genSingletonNewAst(ctx, astFile)

	return utils.GenerateCode(filename, astFile, ctx,
		`// Code generated by "inject-golang -m singleton"; DO NOT EDIT.`)
}

func genSingletonImportsAst(ctx *model.Ctx, astFile *ast.File, filename string) {

	for _, instance := range ctx.SingletonInstances {
		if _, ok := instance.(*model.Provide); ok {
			for _, importNode := range instance.GetImports() {
				importName := importNode.Name
				if importName == "_" {
					importName = ""
				}
				err := addImport(astFile, ctx, importName, importNode.Path)
				if err != nil {
					utils.Failuref("%s, %s", filename, err.Error())
				}
			}
		}
	}
	if ctx.HasWebInstance {
		err := addImport(astFile, ctx, "", "github.com/gofiber/fiber/v2")
		if err != nil {
			utils.Failuref("%s, %s", filename, err.Error())
		}
	}
}

// # gen segment: Struct #
func genSingletonStructAst(ctx *model.Ctx, astFile *ast.File) {
	var fields []*ast.Field
	for _, instance := range ctx.SingletonInstances {
		instanceName := instance.GetInstance()
		instanceType := instance.GetType()

		fieldName := utils.FirstToLower(instanceName)

		fieldType := instanceType

		field := astField(
			fieldName,
			fieldType,
		)
		fields = append(fields, field)
	}

	structDecl := astStructDecl(
		CtxType,
		fields,
	)

	addDecl(astFile, structDecl)
}

func genSingletonGetterAndSetterAst(ctx *model.Ctx, astFile *ast.File) {
	/// Getter / Setter
	for _, instance := range ctx.SingletonInstances {
		instanceName := instance.GetInstance()
		instanceType := instance.GetType()
		instanceFunc := instance.GetFunc()

		fieldName := utils.FirstToLower(instanceName)
		fieldGetter := utils.GetterOf(instanceName)
		fieldSetter := utils.SetterOf(instanceName)
		fieldType := instanceType

		var doc string
		if instanceFunc.Package == "" {
			doc = "// Generate by system"
		} else {
			doc = fmt.Sprintf("// Generate by annotations from %s.%s", instanceFunc.Package, instanceFunc.FuncName)
		}

		getterDecl := astCtxGetter(
			doc,
			fieldGetter,
			fieldName,
			fieldType,
		)
		addDecl(astFile, getterDecl)
		ctx.Methods = append(ctx.Methods, getterDecl)

		setterDecl := astCtxSetter(
			doc,
			fieldSetter,
			fieldName,
			fieldType,
		)
		addDecl(astFile, setterDecl)
		ctx.Methods = append(ctx.Methods, setterDecl)
	}
}

// # gen segment: Singleton instance #
func genCtxNewAst(ctx *model.Ctx, astFile *ast.File) {
	ctxVar := "ctx"

	var docs []*ast.Comment
	var stmts []ast.Stmt
	// [code] ctx := &Ctx{}
	stmts = append(stmts, astDefineStmt(
		ast.NewIdent(ctxVar),
		astDeclareRef(ast.NewIdent(CtxType), nil),
	))

	// create instances
	for _, instance := range ctx.SingletonInstances {
		instanceOrder := instance.GetOrder()
		instanceName := instance.GetInstance()
		instanceFunc := instance.GetFunc()
		instanceType := instance.GetType()

		fieldName := utils.FirstToLower(instanceName)
		fieldExpr := astSelectorExpr(ctxVar, fieldName)
		constructor := instance.GetConstructor()

		if constructor == nil {
			if instanceFunc.FuncName == "" {
				// [code] ctx.{{PrivateName}} = &{{Package}}.{{EventName}}{}
				constructor = astDeclareRef(
					instanceType,
					nil,
				)
			} else {
				// [code] ctx.{{PrivateName}} = ctx.New{{Instance}}()
				constructor = &ast.CallExpr{Fun: astSelectorExpr(ctxVar, "New"+instanceName)}
			}
		}

		stmts = append(stmts, astAssignStmt(
			fieldExpr,
			constructor,
		))

		if instanceOrder != "" {
			docs = append(docs, &ast.Comment{
				Text: "//  " + instanceOrder,
			})
		}
	}

	// call func
	for _, instance := range ctx.SingletonInstances {
		if _, ok := instance.(*model.Provide); ok {

			handler := instance.GetHandler()
			if handler != "" {

				var instanceCallExpr *ast.CallExpr
				if strings.Contains(handler, ".") {
					// [code] {{Handler}}()
					instanceCallExpr = &ast.CallExpr{
						Fun: ast.NewIdent(handler),
					}
				} else {
					// [code] ctx.{{Handler}}()
					instanceCallExpr = &ast.CallExpr{
						Fun: astSelectorExpr(ctxVar, handler),
					}
				}

				// [code] {{Package}}.{{FunName}}(...)
				stmts = append(stmts, &ast.ExprStmt{
					X: instanceCallExpr,
				})
			}
		}
	}

	// [code] return ctx
	stmts = append(stmts, &ast.ReturnStmt{
		Results: []ast.Expr{
			ast.NewIdent(ctxVar),
		},
	})

	funcDecl := astFuncDecl(
		nil,
		"New",
		nil,
		[]*ast.Field{
			{
				Type: astStarExpr(ast.NewIdent(CtxType)),
			},
		},
		stmts,
	)
	if docs != nil {
		docs = append([]*ast.Comment{{Text: "// Action list:"}}, docs...)
		ctx.Doc = docs
		funcDecl.Doc = &ast.CommentGroup{List: docs}
	}

	addDecl(astFile, funcDecl)
}

func genSingletonNewAst(ctx *model.Ctx, astFile *ast.File) {
	ctxVar := "ctx"

	for _, instance := range ctx.SingletonInstances {
		if _, ok := instance.(*model.Provide); ok {
			instanceName := instance.GetInstance()
			instanceFunc := instance.GetFunc()

			var stmts []ast.Stmt
			instanceCallExpr := astInstanceCallExpr(astSelectorExpr(instanceFunc.Package, instanceFunc.FuncName), instanceFunc, ctx, ctxVar)
			stmts = append(stmts, &ast.ReturnStmt{
				Results: []ast.Expr{
					instanceCallExpr,
				},
			})

			// [code] func (ctx *Container) {{Proxy}}(
			funcDecl := astInstanceProxyFunc(instanceFunc, "New"+instanceName)
			funcDecl.Body = &ast.BlockStmt{
				List: stmts,
			}
			funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{{
				Text: fmt.Sprintf("// Generate by annotations from %s.%s", instanceFunc.Package, instanceFunc.FuncName),
			}}}
			addDecl(astFile, funcDecl)
			ctx.Methods = append(ctx.Methods, funcDecl)
		}
	}
}
