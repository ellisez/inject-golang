package gen

import (
	. "github.com/ellisez/inject-golang/global"
	"github.com/ellisez/inject-golang/model"
	"github.com/ellisez/inject-golang/utils"
	"go/ast"
	"go/token"
	"path/filepath"
)

func genCtxFile(ctx *model.Ctx, dir string) error {
	filename := filepath.Join(dir, GenCtxFilename)

	astFile := &ast.File{
		Name:  ast.NewIdent(GenPackage),
		Scope: ast.NewScope(nil),
	}

	genCtxImportAst(ctx, astFile)

	genCtxInterfaceAst(ctx, astFile)

	astFile, err := utils.OptimizeCode(filename, astFile, ctx,
		`// Code generated by "inject-golang"; DO NOT EDIT.`)
	if err != nil {
		return err
	}

	return utils.GenerateCode(filename, astFile, ctx)
}

func genCtxImportAst(ctx *model.Ctx, astFile *ast.File) {
	astFile.Imports = ctx.Imports
}

func genCtxInterfaceAst(ctx *model.Ctx, astFile *ast.File) {
	var fields []*ast.Field
	for _, method := range ctx.Methods {
		fields = append(fields, &ast.Field{
			Comment: method.Doc,
			Names: []*ast.Ident{
				method.Name,
			},
			Type: method.Type,
		})
	}
	addDecl(astFile, &ast.GenDecl{
		Tok: token.TYPE,
		Specs: []ast.Spec{
			&ast.TypeSpec{
				Name: ast.NewIdent(CtxType),
				Type: &ast.InterfaceType{
					Methods: &ast.FieldList{List: fields},
				},
			},
		},
	})
}
