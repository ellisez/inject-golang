package gen

import (
	. "github.com/ellisez/inject-golang/global"
	"github.com/ellisez/inject-golang/model"
	"github.com/ellisez/inject-golang/utils"
	"go/ast"
	"go/format"
	"go/token"
	"os"
	"path/filepath"
)

func genCtxFile(moduleInfo *model.ModuleInfo, dir string) error {
	filename := filepath.Join(dir, GenCtxFilename)

	err := utils.CreateDirectoryIfNotExists(dir)
	if err != nil {
		return err
	}

	file, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		return err
	}
	defer file.Close()

	astFile := &ast.File{
		Name:  astIdent(GenPackage),
		Scope: ast.NewScope(nil),
	}

	genCtxImportAst(moduleInfo, astFile)

	genCtxInterfaceAst(moduleInfo, astFile)

	addFileDoc(astFile, "// Code generated by \"inject-golang\"; DO NOT EDIT.")

	err = format.Node(file, token.NewFileSet(), astFile)
	if err != nil {
		return err
	}
	return nil
}

func genCtxImportAst(moduleInfo *model.ModuleInfo, astFile *ast.File) {
	astFile.Imports = moduleInfo.CtxImports
	addImportDecl(astFile)
}

func genCtxInterfaceAst(moduleInfo *model.ModuleInfo, astFile *ast.File) {
	addDecl(astFile, &ast.GenDecl{
		Tok: token.TYPE,
		Specs: []ast.Spec{
			&ast.TypeSpec{
				Name: astIdent(StructName),
				Type: &ast.InterfaceType{
					Methods: &ast.FieldList{List: moduleInfo.CtxMethodFields},
				},
			},
		},
	})
}
