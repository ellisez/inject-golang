package gen

import (
	. "github.com/ellisez/inject-golang/global"
	"github.com/ellisez/inject-golang/model"
	"github.com/ellisez/inject-golang/utils"
	"go/ast"
	"path"
	"path/filepath"
)

func genFactoryFile(moduleInfo *model.ModuleInfo, dir string) error {
	fileDir := filepath.Join(dir, GenFactoryPackage)
	filename := filepath.Join(fileDir, GenFactoryFilename)

	astFile := &ast.File{
		Name:  astIdent(GenFactoryPackage),
		Scope: ast.NewScope(nil),
	}

	genFactoryImportAst(moduleInfo, astFile)

	genFactoryNewAst(moduleInfo, astFile)

	astFile, err := utils.OptimizeCode(filename, astFile, moduleInfo,
		"// Code generated by \"inject-golang\"; DO NOT EDIT.")
	if err != nil {
		return err
	}

	return utils.GenerateCode(filename, astFile, moduleInfo)
}

func genFactoryImportAst(moduleInfo *model.ModuleInfo, astFile *ast.File) {
	addImport(astFile, moduleInfo, "", path.Join(Mod.Package, GenPackage, "internal"))
}

func genFactoryNewAst(_ *model.ModuleInfo, astFile *ast.File) {
	addDecl(astFile, astFuncDecl(
		nil,
		"New",
		nil,
		[]*ast.Field{
			astField("", astStarExpr(astSelectorExpr(GenInternalPackage, StructName))),
		},
		[]ast.Stmt{
			&ast.ReturnStmt{Results: []ast.Expr{
				&ast.CallExpr{
					Fun: astSelectorExpr(GenInternalPackage, "New"),
				},
			}},
		},
	))
}
