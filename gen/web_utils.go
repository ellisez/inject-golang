package gen

import (
	. "github.com/ellisez/inject-golang/global"
	"github.com/ellisez/inject-golang/model"
	"github.com/ellisez/inject-golang/utils"
	"go/ast"
	"go/token"
	"os"
	"path/filepath"
)

func genWebUtilsFile(ctx *model.Ctx, dir string) error {
	fileDir := filepath.Join(dir, GenUtilsPackage)
	filename := filepath.Join(fileDir, GenWebUtilsFilename)

	if !ctx.HasWebInstance {
		err := os.Remove(filename)
		if err != nil {
			if os.IsNotExist(err) {
				return nil
			}
			return err
		}
		return nil
	}

	astFile := &ast.File{
		Name:  ast.NewIdent(GenUtilsPackage),
		Scope: ast.NewScope(nil),
	}

	genWebUtilsImportsAst(ctx, astFile, filename)

	genWebUtilsFuncAst(ctx, astFile)

	return utils.GenerateCode(filename, astFile, ctx,
		`// Code generated by "inject-golang -m web"; DO NOT EDIT.`)
}

func genWebUtilsImportsAst(ctx *model.Ctx, astFile *ast.File, filename string) {
	err := addImport(astFile, ctx, "", "mime/multipart")
	if err != nil {
		utils.Failuref("%s, %s", filename, err.Error())
	}
	err = addImport(astFile, ctx, "", "reflect")
	if err != nil {
		utils.Failuref("%s, %s", filename, err.Error())
	}
	err = addImport(astFile, ctx, "", "strconv")
	if err != nil {
		utils.Failuref("%s, %s", filename, err.Error())
	}
	err = addImport(astFile, ctx, "", "github.com/gofiber/fiber/v2")
	if err != nil {
		utils.Failuref("%s, %s", filename, err.Error())
	}
	err = addImport(astFile, ctx, "", "fmt")
	if err != nil {
		utils.Failuref("%s, %s", filename, err.Error())
	}
}

func genWebUtilsFuncAst(ctx *model.Ctx, astFile *ast.File) {
	funcDoc := &ast.Comment{
		Text: "// Generate by system",
	}

	// [code] func Params(webCtx *fiber.Ctx, key string, defaultValue ...string) string
	funcName := "Params"
	funcParams := []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("string")}),
	}
	funcResults := []*ast.Field{
		astField("", ast.NewIdent("string")),
	}
	funcDecl := astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "Params"),
						Args: []ast.Expr{
							ast.NewIdent("key"),
							ast.NewIdent("defaultValue"),
						},
						Ellipsis: 1,
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func ParamsInt(webCtx *fiber.Ctx, key string, defaultValue ...int) (int, error)
	funcName = "ParamsInt"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("int")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("int")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "ParamsInt"),
						Args: []ast.Expr{
							ast.NewIdent("key"),
							ast.NewIdent("defaultValue"),
						},
						Ellipsis: 1,
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func ParamsBool(webCtx *fiber.Ctx, key string, defaultValue ...bool) (bool, error)
	funcName = "ParamsBool"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("bool")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("bool")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("Params"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "ParseBool"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func ParamsFloat(webCtx *fiber.Ctx, key string, defaultValue ...float64) (float64, error)
	funcName = "ParamsFloat"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("float64")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("float64")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("Params"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "ParseFloat"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
					astIntExpr("64"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func ParamsParser(webCtx *fiber.Ctx, out any) error
	funcName = "ParamsParser"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("out", ast.NewIdent("any")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("int")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "ParamsParser"),
						Args: []ast.Expr{
							ast.NewIdent("out"),
						},
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func Query(webCtx *fiber.Ctx, key string, defaultValue ...string) string
	funcName = "Query"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("string")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("string")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "Query"),
						Args: []ast.Expr{
							ast.NewIdent("key"),
							ast.NewIdent("defaultValue"),
						},
						Ellipsis: 1,
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func QueryInt(webCtx *fiber.Ctx, key string, defaultValue ...int) (int, error)
	funcName = "QueryInt"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("int")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("int")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("Query"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "Atoi"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func QueryBool(webCtx *fiber.Ctx, key string, defaultValue ...bool) (bool, error)
	funcName = "QueryBool"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("bool")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("bool")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("Query"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "ParseBool"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func QueryFloat(webCtx *fiber.Ctx, key string, defaultValue ...float64) (float64, error)
	funcName = "QueryFloat"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("float64")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("float64")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("Query"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "ParseFloat"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
					astIntExpr("64"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func QueryParser(webCtx *fiber.Ctx, out any) error
	funcName = "QueryParser"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("out", ast.NewIdent("any")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("int")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "QueryParser"),
						Args: []ast.Expr{
							ast.NewIdent("out"),
						},
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func Header(webCtx *fiber.Ctx, key string, defaultValue ...string) string
	funcName = "Header"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("string")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("string")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "GetRespHeader"),
						Args: []ast.Expr{
							ast.NewIdent("key"),
							ast.NewIdent("defaultValue"),
						},
						Ellipsis: 1,
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func HeaderInt(webCtx *fiber.Ctx, key string, defaultValue ...int) (int, error)
	funcName = "HeaderInt"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("int")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("int")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("Header"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "Atoi"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func HeaderBool(webCtx *fiber.Ctx, key string, defaultValue ...bool) (bool, error)
	funcName = "HeaderBool"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("bool")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("bool")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("Header"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "ParseBool"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func HeaderFloat(webCtx *fiber.Ctx, key string, defaultValue ...float64) (float64, error)
	funcName = "HeaderFloat"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("float64")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("float64")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("Header"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "ParseFloat"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
					astIntExpr("64"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func HeaderParser(webCtx *fiber.Ctx, out any) error

	funcName = "HeaderParser"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("out", ast.NewIdent("any")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("int")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "ReqHeaderParser"),
						Args: []ast.Expr{
							ast.NewIdent("out"),
						},
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func FormString(webCtx *fiber.Ctx, key string, defaultValue ...string) string
	funcName = "FormString"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("string")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("string")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "FormValue"),
						Args: []ast.Expr{
							ast.NewIdent("key"),
							ast.NewIdent("defaultValue"),
						},
						Ellipsis: 1,
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func FormFile(webCtx *fiber.Ctx, key string) (*multipart.FileHeader, error)
	funcName = "FormFile"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
	}
	funcResults = []*ast.Field{
		astField("", astStarExpr(astSelectorExpr("multipart", "FileHeader"))),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "FormFile"),
						Args: []ast.Expr{
							ast.NewIdent("key"),
						},
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func FormInt(webCtx *fiber.Ctx, key string, defaultValue ...int) (int, error)
	funcName = "FormInt"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("int")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("int")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("FormString"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "Atoi"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func FormBool(webCtx *fiber.Ctx, key string, defaultValue ...bool) (bool, error)
	funcName = "FormBool"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("bool")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("bool")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("FormString"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "ParseBool"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func FormFloat(webCtx *fiber.Ctx, key string, defaultValue ...float64) (float64, error)
	funcName = "FormFloat"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("key", ast.NewIdent("string")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("float64")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("float64")),
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		paramConvStmts(
			&ast.CallExpr{
				Fun: ast.NewIdent("FormString"),
				Args: []ast.Expr{
					ast.NewIdent("webCtx"),
					ast.NewIdent("key"),
				},
			},
			&ast.CallExpr{
				Fun: astSelectorExpr("strconv", "ParseFloat"),
				Args: []ast.Expr{
					ast.NewIdent("str"),
					astIntExpr("64"),
				},
			},
		),
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func FormParser(webCtx *fiber.Ctx, out any) error
	funcName = "FormParser"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("out", ast.NewIdent("any")),
		astField("defaultValue", &ast.Ellipsis{Elt: ast.NewIdent("int")}),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			astDefineStmt(
				ast.NewIdent("elem"),
				&ast.CallExpr{
					Fun: astSelectorExprRecur(
						&ast.CallExpr{
							Fun: astSelectorExpr(
								"reflect",
								"ValueOf",
							),
							Args: []ast.Expr{
								ast.NewIdent("out"),
							},
						},
						"Elem",
					),
				},
			),
			astDefineStmtMany(
				[]ast.Expr{
					ast.NewIdent("form"),
					ast.NewIdent("err"),
				},
				&ast.CallExpr{
					Fun: astSelectorExpr(
						"webCtx",
						"MultipartForm",
					),
				},
			),
			errorReturnStmts(),
			&ast.RangeStmt{
				Key:   ast.NewIdent("key"),
				Value: ast.NewIdent("strArr"),
				Tok:   token.DEFINE,
				X:     astSelectorExpr("form", "Value"),
				Body: &ast.BlockStmt{
					List: []ast.Stmt{
						&ast.RangeStmt{
							Key:   ast.NewIdent("_"),
							Value: ast.NewIdent("value"),
							Tok:   token.DEFINE,
							X:     ast.NewIdent("strArr"),
							Body: &ast.BlockStmt{
								List: []ast.Stmt{
									astDefineStmt(
										ast.NewIdent("field"),
										&ast.CallExpr{
											Fun: astSelectorExpr("elem", "FieldByName"),
											Args: []ast.Expr{
												ast.NewIdent("key"),
											},
										},
									),
									&ast.IfStmt{
										Cond: &ast.BinaryExpr{
											Op: token.LAND,
											X: &ast.CallExpr{
												Fun: astSelectorExpr("field", "IsValid"),
											},
											Y: &ast.CallExpr{
												Fun: astSelectorExpr("field", "CanSet"),
											},
										},
										Body: &ast.BlockStmt{
											List: []ast.Stmt{
												&ast.SwitchStmt{
													Tag: &ast.CallExpr{
														Fun: astSelectorExpr("field", "Kind"),
													},
													Body: &ast.BlockStmt{
														List: []ast.Stmt{
															&ast.CaseClause{
																List: []ast.Expr{
																	astSelectorExpr("reflect", "String"),
																},
																Body: []ast.Stmt{
																	&ast.ExprStmt{
																		X: &ast.CallExpr{
																			Fun: astSelectorExpr("field", "SetString"),
																			Args: []ast.Expr{
																				ast.NewIdent("value"),
																			},
																		},
																	},
																	&ast.BranchStmt{Tok: token.BREAK},
																},
															},
															&ast.CaseClause{
																List: []ast.Expr{
																	astSelectorExpr("reflect", "Int"),
																},
																Body: []ast.Stmt{
																	astDefineStmtMany(
																		[]ast.Expr{
																			ast.NewIdent("intValue"),
																			ast.NewIdent("err"),
																		},
																		&ast.CallExpr{
																			Fun: astSelectorExpr("strconv", "Atoi"),
																			Args: []ast.Expr{
																				ast.NewIdent("value"),
																			},
																		},
																	),
																	errorReturnStmts(),
																	&ast.ExprStmt{
																		X: &ast.CallExpr{
																			Fun: astSelectorExpr("field", "SetInt"),
																			Args: []ast.Expr{
																				&ast.CallExpr{
																					Fun: ast.NewIdent("int64"),
																					Args: []ast.Expr{
																						ast.NewIdent("intValue"),
																					},
																				},
																			},
																		},
																	},
																	&ast.BranchStmt{Tok: token.BREAK},
																},
															},
															&ast.CaseClause{
																List: []ast.Expr{
																	astSelectorExpr("reflect", "Bool"),
																},
																Body: []ast.Stmt{
																	astDefineStmtMany(
																		[]ast.Expr{
																			ast.NewIdent("boolValue"),
																			ast.NewIdent("err"),
																		},
																		&ast.CallExpr{
																			Fun: astSelectorExpr("strconv", "ParseBool"),
																			Args: []ast.Expr{
																				ast.NewIdent("value"),
																			},
																		},
																	),
																	errorReturnStmts(),
																	&ast.ExprStmt{
																		X: &ast.CallExpr{
																			Fun: astSelectorExpr("field", "SetBool"),
																			Args: []ast.Expr{
																				ast.NewIdent("boolValue"),
																			},
																		},
																	},
																	&ast.BranchStmt{Tok: token.BREAK},
																},
															},
															&ast.CaseClause{
																List: []ast.Expr{
																	astSelectorExpr("reflect", "Float64"),
																},
																Body: []ast.Stmt{
																	astDefineStmtMany(
																		[]ast.Expr{
																			ast.NewIdent("floatValue"),
																			ast.NewIdent("err"),
																		},
																		&ast.CallExpr{
																			Fun: astSelectorExpr("strconv", "ParseFloat"),
																			Args: []ast.Expr{
																				ast.NewIdent("value"),
																				astIntExpr("64"),
																			},
																		},
																	),
																	errorReturnStmts(),
																	&ast.ExprStmt{
																		X: &ast.CallExpr{
																			Fun: astSelectorExpr("field", "SetFloat"),
																			Args: []ast.Expr{
																				ast.NewIdent("floatValue"),
																			},
																		},
																	},
																	&ast.BranchStmt{Tok: token.BREAK},
																},
															},
															&ast.CaseClause{
																Body: []ast.Stmt{
																	&ast.ReturnStmt{
																		Results: []ast.Expr{
																			&ast.CallExpr{
																				Fun: astSelectorExpr("fmt", "Errorf"),
																				Args: []ast.Expr{
																					astStringExpr("unsupported type %T"),
																					ast.NewIdent("value"),
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										Else: &ast.IfStmt{
											Cond: &ast.UnaryExpr{
												Op: token.NOT,
												X: &ast.CallExpr{
													Fun: astSelectorExpr("field", "IsValid"),
												},
											},
											Body: &ast.BlockStmt{},
										},
									},
								},
							},
						},
					},
				},
			},
			&ast.RangeStmt{
				Key:   ast.NewIdent("key"),
				Value: ast.NewIdent("fileArr"),
				Tok:   token.DEFINE,
				X:     astSelectorExpr("form", "File"),
				Body: &ast.BlockStmt{
					List: []ast.Stmt{
						&ast.RangeStmt{
							Key:   ast.NewIdent("_"),
							Value: ast.NewIdent("file"),
							Tok:   token.DEFINE,
							X:     ast.NewIdent("fileArr"),
							Body: &ast.BlockStmt{
								List: []ast.Stmt{
									astDefineStmt(
										ast.NewIdent("field"),
										&ast.CallExpr{
											Fun: astSelectorExpr("elem", "FieldByName"),
											Args: []ast.Expr{
												ast.NewIdent("key"),
											},
										},
									),
									&ast.IfStmt{
										Cond: &ast.BinaryExpr{
											Op: token.LAND,
											X: &ast.CallExpr{
												Fun: astSelectorExpr("field", "IsValid"),
											},
											Y: &ast.CallExpr{
												Fun: astSelectorExpr("field", "CanSet"),
											},
										},
										Body: &ast.BlockStmt{
											List: []ast.Stmt{
												&ast.ExprStmt{
													X: &ast.CallExpr{
														Fun: astSelectorExpr("field", "Set"),
														Args: []ast.Expr{
															&ast.CallExpr{
																Fun: astSelectorExpr("reflect", "ValueOf"),
																Args: []ast.Expr{
																	ast.NewIdent("file"),
																},
															},
														},
													},
												},
											},
										},
										Else: &ast.IfStmt{
											Cond: &ast.UnaryExpr{
												Op: token.NOT,
												X: &ast.CallExpr{
													Fun: astSelectorExpr("field", "IsValid"),
												},
											},
											Body: &ast.BlockStmt{},
										},
									},
								},
							},
						},
					},
				},
			},
			&ast.ReturnStmt{
				Results: []ast.Expr{
					ast.NewIdent("nil"),
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func Body(webCtx *fiber.Ctx) []byte
	funcName = "Body"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
	}
	funcResults = []*ast.Field{
		astField("", &ast.ArrayType{
			Elt: ast.NewIdent("byte"),
		}),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "Body"),
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func BodyString(webCtx *fiber.Ctx) string
	funcName = "BodyString"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("string")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: ast.NewIdent("string"),
						Args: []ast.Expr{
							&ast.CallExpr{
								Fun: ast.NewIdent("Body"),
								Args: []ast.Expr{
									ast.NewIdent("webCtx"),
								},
							},
						},
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)

	// [code] func BodyParser(webCtx *fiber.Ctx, out any) error
	funcName = "BodyParser"
	funcParams = []*ast.Field{
		astField("webCtx", astStarExpr(
			astSelectorExpr("fiber", "Ctx"))),
		astField("out", ast.NewIdent("any")),
	}
	funcResults = []*ast.Field{
		astField("", ast.NewIdent("error")),
	}
	funcDecl = astFuncDecl(
		nil,
		funcName,
		funcParams,
		funcResults,
		[]ast.Stmt{
			&ast.ReturnStmt{
				Results: []ast.Expr{
					&ast.CallExpr{
						Fun: astSelectorExpr("webCtx", "BodyParser"),
						Args: []ast.Expr{
							ast.NewIdent("out"),
						},
					},
				},
			},
		},
	)
	funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{

		funcDoc,
	}}
	addDecl(astFile, funcDecl)
}

func paramConvStmts(strCall *ast.CallExpr, convCall *ast.CallExpr) []ast.Stmt {
	return []ast.Stmt{
		astDefineStmt(ast.NewIdent("str"), strCall),
		// [code] if str == "" && defaultValue != nil
		&ast.IfStmt{
			Cond: &ast.BinaryExpr{
				Op: token.LAND,
				X: &ast.BinaryExpr{
					Op: token.EQL,
					X:  ast.NewIdent("str"),
					Y:  astStringExpr(""),
				},
				Y: &ast.BinaryExpr{
					Op: token.NEQ,
					X:  ast.NewIdent("defaultValue"),
					Y:  ast.NewIdent("nil"),
				},
			},
			Body: &ast.BlockStmt{
				List: []ast.Stmt{
					// [code] return defaultValue[0], nil
					&ast.ReturnStmt{
						Results: []ast.Expr{
							&ast.IndexExpr{
								Index: astIntExpr("0"),
								X:     ast.NewIdent("defaultValue"),
							},
							ast.NewIdent("nil"),
						},
					},
				},
			},
		},
		// [code] return strconv.ParseBool(str)
		&ast.ReturnStmt{
			Results: []ast.Expr{
				convCall,
			},
		},
	}
}
