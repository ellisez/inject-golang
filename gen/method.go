package gen

import (
	"fmt"
	. "github.com/ellisez/inject-golang/global"
	"github.com/ellisez/inject-golang/model"
	"github.com/ellisez/inject-golang/utils"
	"go/ast"
	"os"
	"path/filepath"
)

// gen_method.go
func genMethodFile(ctx *model.Ctx, dir string) error {
	fileDir := filepath.Join(dir, GenInternalPackage)
	filename := filepath.Join(fileDir, GenMethodFilename)

	if ctx.MethodInstances.Len() == 0 {
		err := os.Remove(filename)
		if err != nil {
			if os.IsNotExist(err) {
				return nil
			}
			return err
		}
		return nil
	}

	astFile := &ast.File{
		Name:  ast.NewIdent(GenInternalPackage),
		Scope: ast.NewScope(nil),
	}

	genMethodImportsAst(ctx, astFile, filename)

	genMethodAst(ctx, astFile)

	return utils.GenerateCode(filename, astFile, ctx,
		`// Code generated by "inject-golang -m func"; DO NOT EDIT.`)
}

func genMethodImportsAst(ctx *model.Ctx, astFile *ast.File, filename string) {

	for _, key := range ctx.MethodInstances.Keys {
		instance := ctx.MethodInstances.Get(key)
		for _, importInfo := range instance.Imports {
			importName := importInfo.Name
			if importName == "_" {
				importName = ""
			}
			err := addImport(astFile, ctx, importName, importInfo.Path)
			if err != nil {
				utils.Failuref("%s, %s", filename, err.Error())
			}
		}
	}
}

// # gen segment: Method inject #
func genMethodAst(ctx *model.Ctx, astFile *ast.File) {
	ctxVar := utils.FirstToLower(CtxType)

	for _, key := range ctx.MethodInstances.Keys {
		instance := ctx.MethodInstances.Get(key)
		var recvParam *ast.Field
		recvParamVar := utils.FieldVar(instance.Recv)
		if instance.Recv.Source == "" {
			recvParam = astField(recvParamVar, instance.Recv.Type)
		}

		stmts := make([]ast.Stmt, 0)

		instanceCallExpr := astInstanceCallExpr(astSelectorExpr(recvParamVar, instance.FuncName), instance.Func, ctx, ctxVar)
		if instance.Results == nil {
			stmts = append(stmts, &ast.ExprStmt{
				X: instanceCallExpr,
			})
		} else {
			stmts = append(stmts, &ast.ReturnStmt{
				Results: []ast.Expr{
					instanceCallExpr,
				},
			})
		}

		funcDecl := astInstanceProxyFunc(instance.Func, instance.Instance, recvParam)
		funcDecl.Body = &ast.BlockStmt{
			List: stmts,
		}
		funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{{
			Text: fmt.Sprintf("// Generate by annotations from %s.%s", instance.Package, instance.FuncName),
		}}}
		addDecl(astFile, funcDecl)
		ctx.Methods[funcDecl.Name.String()] = funcDecl
	}

}
