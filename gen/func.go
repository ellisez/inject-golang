package gen

import (
	"fmt"
	. "github.com/ellisez/inject-golang/global"
	"github.com/ellisez/inject-golang/model"
	"github.com/ellisez/inject-golang/utils"
	"go/ast"
	"os"
	"path/filepath"
)

// gen_func.go
func genFuncFile(ctx *model.Ctx, dir string) error {
	fileDir := filepath.Join(dir, GenInternalPackage)
	filename := filepath.Join(fileDir, GenFuncFilename)

	if ctx.FuncInstances == nil {
		err := os.Remove(filename)
		if err != nil {
			if os.IsNotExist(err) {
				return nil
			}
			return err
		}
		return nil
	}

	astFile := &ast.File{
		Name:  ast.NewIdent(GenInternalPackage),
		Scope: ast.NewScope(nil),
	}

	genFuncImportsAst(ctx, astFile)

	genFuncAst(ctx, astFile)

	return utils.GenerateCode(filename, astFile, ctx,
		`// Code generated by "inject-golang -m func"; DO NOT EDIT.`)
}
func genFuncImportsAst(ctx *model.Ctx, astFile *ast.File) {

	for _, instance := range ctx.FuncInstances {
		for _, importInfo := range instance.Imports {
			importName := importInfo.Name
			if importName == "_" {
				importName = ""
			}
			addImport(astFile, ctx, importName, importInfo.Path)
		}
	}
}

// # gen segment: Func inject #
func genFuncAst(ctx *model.Ctx, astFile *ast.File) {
	ctxVar := utils.FirstToLower(CtxType)

	for _, instance := range ctx.FuncInstances {

		var stmts []ast.Stmt
		instanceCallExpr := astInstanceCallExpr(astSelectorExpr(instance.Package, instance.FuncName), instance.Func, ctx, ctxVar)
		if len(instance.Results) == 0 {
			stmts = append(stmts, &ast.ExprStmt{
				X: instanceCallExpr,
			})
		} else {
			stmts = append(stmts, &ast.ReturnStmt{
				Results: []ast.Expr{
					instanceCallExpr,
				},
			})
		}

		var results []*ast.Field
		for _, result := range instance.Results {
			results = append(results, astField(result.Name, result.Type))
		}

		// [code] func (ctx *Container) {{Proxy}}(
		funcDecl := astInstanceProxyFunc(instance.Func, instance.Instance)
		funcDecl.Body = &ast.BlockStmt{
			List: stmts,
		}
		funcDecl.Doc = &ast.CommentGroup{List: []*ast.Comment{{
			Text: fmt.Sprintf("// Generate by annotations from %s.%s", instance.Package, instance.FuncName),
		}}}
		addDecl(astFile, funcDecl)
		ctx.Methods = append(ctx.Methods, funcDecl)
	}

}
